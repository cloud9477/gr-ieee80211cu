/*
 *
 *     GNU Radio IEEE 802.11a/g/n/ac 20M bw and upto 2x2
 *     PHY utilization functions and parameters CUDA Version
 *     Copyright (C) Dec 1, 2022  Zelin Yun
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as published
 *     by the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "cloud80211phycu.cuh"


/*--------------------------------------------------------------------------------------------------------*/

cuFloatComplex* ppSig;
cuFloatComplex* ppSigConj;
cuFloatComplex* ppSigConjAvg;
float* ppSigConjAvgMag;
float* ppSigMag2;
float* ppSigMag2Avg;
float* ppOut;

void preprocMall()
{
  cudaMalloc(&ppSig, PREPROC_MAX*sizeof(cuFloatComplex));
  cudaMalloc(&ppSigConj, PREPROC_MAX*sizeof(cuFloatComplex));
  cudaMalloc(&ppSigConjAvg, PREPROC_MAX*sizeof(cuFloatComplex));
  cudaMalloc(&ppSigConjAvgMag, PREPROC_MAX*sizeof(float));
  cudaMalloc(&ppSigMag2, PREPROC_MAX*sizeof(float));
  cudaMalloc(&ppSigMag2Avg, PREPROC_MAX*sizeof(float));
  cudaMalloc(&ppOut, PREPROC_MAX*sizeof(float));
}

void preprocFree()
{
  cudaFree(ppSig);
  cudaFree(ppSigConj);
  cudaFree(ppSigConjAvg);
  cudaFree(ppSigConjAvgMag);
  cudaFree(ppSigMag2);
  cudaFree(ppSigMag2Avg);
  cudaFree(ppOut);
}

__global__
void cuPreProcConj(int n, cuFloatComplex* inSig, cuFloatComplex* inSigConj)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i < (n-16))
  {
    inSigConj[i] = cuCmulf(inSig[i], make_cuFloatComplex (cuCrealf(inSig[i+16]), -cuCimagf(inSig[i+16])));
  }
}

__global__
void cuPreProcMag2(int n, cuFloatComplex* inSig, float* inSigMag2)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i < n)
  {
    inSigMag2[i] = cuCabsf(inSig[i]);
    inSigMag2[i] = inSigMag2[i] * inSigMag2[i];
  }
}

__global__
void cuPreProcConjAvgMag(int n, cuFloatComplex* inSigConj, cuFloatComplex* inSigConjAvg, float* inSigConjAvgMag)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i < (n-48))
  {
    inSigConjAvg[i] = make_cuFloatComplex(0.0f, 0.0f);
    for(int j=0;j<48;j++)
    {
      inSigConjAvg[i] = cuCaddf(inSigConjAvg[i], inSigConj[i+j]);
    }
    inSigConjAvgMag[i] = cuCabsf(inSigConjAvg[i]);
  }
}

__global__
void cuPreProcMag2AvgOut(int n, float* inSigMag2, float* inSigMag2Avg, float* inSigConjAvgMag, float* out)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i < (n-64))
  {
    inSigMag2Avg[i] = 0.0f;
    for(int j=0;j<64;j++)
    {
      inSigMag2Avg[i] += inSigMag2[i+j];
    }
    out[i] = inSigConjAvgMag[i] / inSigMag2Avg[i];
  }
}

void cuPreProc(int n, const cuFloatComplex *sig, float* ac, cuFloatComplex* conj)
{
  if(n > 64 && n < PREPROC_MAX)
  {
    cudaMemcpy(ppSig, sig, n*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
    cuPreProcConj<<<n/1024 + 1, 1024>>>(n, ppSig, ppSigConj);
    cuPreProcMag2<<<n/1024 + 1, 1024>>>(n, ppSig, ppSigMag2);
    cuPreProcConjAvgMag<<<n/1024 + 1, 1024>>>(n, ppSigConj, ppSigConjAvg, ppSigConjAvgMag);
    cuPreProcMag2AvgOut<<<n/1024 + 1, 1024>>>(n, ppSigMag2, ppSigMag2Avg, ppSigConjAvgMag, ppOut);
    cudaMemcpy(ac, ppOut, (n - 64)*sizeof(float), cudaMemcpyDeviceToHost);
    cudaMemcpy(conj, ppSigConjAvg, (n - 64)*sizeof(cuFloatComplex), cudaMemcpyDeviceToHost);
  }
}

/*--------------------------------------------------------------------------------------------------------*/
unsigned char descramSeq[128][127] = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,},
{0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,},
{1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,},
{0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,},
{1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,},
{0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,},
{1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,},
{1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,},
{0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,},
{1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,},
{0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,},
{1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,},
{0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,},
{1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,},
{0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,},
{0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,},
{1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,},
{0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,},
{1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,},
{0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,},
{1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,},
{0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,},
{1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,},
{1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,},
{0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,},
{1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,},
{0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,},
{1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,},
{0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,},
{1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,},
{0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,},
{0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,},
{1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,},
{0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,},
{1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,},
{0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,},
{1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,},
{0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,},
{1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,},
{1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,},
{0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,},
{1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,},
{0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,},
{1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,},
{0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,},
{1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,},
{0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,},
{0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,},
{1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,},
{0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,},
{1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,},
{0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,},
{1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,},
{0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,},
{1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,},
{1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,},
{0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,},
{1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,},
{0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,},
{1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,},
{0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,},
{1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,},
{0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,},
{0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,},
{1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,},
{0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,},
{1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,},
{0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,},
{1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,},
{0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,},
{1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,},
{1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,},
{0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,},
{1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,},
{0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,},
{1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,},
{0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,},
{1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,},
{0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,},
{0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,},
{1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,},
{0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,},
{1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,},
{0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,},
{1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,},
{0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,},
{1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,},
{1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,},
{0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,},
{1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,},
{0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,},
{1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,},
{0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,},
{1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,},
{0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,},
{0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,},
{1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,},
{0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,},
{1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,},
{0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,},
{1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,},
{0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,},
{1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,},
{1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,},
{0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,},
{1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,},
{0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,},
{1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,},
{0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,},
{1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,},
{0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,},
{0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,},
{1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,},
{0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,},
{1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,},
{0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,},
{1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,},
{0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,},
{1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,},
{1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,},
{0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,},
{1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,},
{0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,},
{1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,},
{0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,},
{1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,},
{0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,},
};

const unsigned char C8P_SCRAMBLE_SEQ[128][127] = {
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1},
{0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0},
{0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1},
{0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0},
{0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1},
{0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0},
{0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1},
{1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0},
{1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1},
{1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0},
{1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1},
{1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0},
{1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1},
{1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0},
{1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1},
{0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0},
{0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1},
{0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0},
{0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1},
{0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0},
{0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1},
{0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0},
{0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1},
{1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0},
{1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1},
{1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0},
{1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1},
{1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0},
{1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1},
{1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0},
{1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1},
{0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0},
{0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1},
{0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0},
{0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1},
{0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0},
{0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1},
{0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0},
{0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1},
{1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0},
{1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1},
{1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0},
{1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1},
{1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0},
{1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1},
{1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0},
{1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1},
{0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0},
{0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1},
{0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0},
{0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1},
{0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0},
{0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1},
{0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0},
{0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1},
{1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0},
{1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1},
{1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0},
{1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1},
{1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0},
{1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1},
{1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0},
{1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1},
{1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0},
{1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1},
{1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0},
{1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1},
{1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0},
{1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1},
{1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0},
{1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1},
{0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0},
{0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1},
{0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0},
{0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1},
{0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0},
{0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1},
{0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0},
{0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1},
{1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0},
{1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1},
{1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0},
{1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1},
{1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0},
{1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1},
{1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0},
{1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1},
{0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0},
{0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1},
{0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0},
{0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1},
{0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0},
{0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1},
{0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0},
{0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1},
{1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0},
{1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1},
{1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0},
{1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1},
{1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0},
{1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1},
{1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0},
{1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1},
{0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0},
{0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1},
{0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0},
{0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1},
{0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0},
{0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1},
{0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0},
{0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1},
{1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0},
{1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1},
{1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0},
{1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1},
{1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0},
{1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1},
{1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0},
{1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1},
{0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0},
{0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1},
{0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0},
{0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1},
{0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0},
{0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1},
{0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0},
{0,0,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,1,1},
};

int mapDeintstreamBpsk[104] = {
    0, 26, 52, 78, 2, 28, 54, 80, 4, 30, 56, 82, 6, 32, 58, 84, 8, 34, 60, 86, 10, 36, 62, 88, 12, 38, 64, 90, 14, 40, 66, 92, 16, 42, 68, 94, 18, 44, 70, 96, 20, 46, 72, 98, 22, 48, 74, 100, 24, 50, 76, 102,
    63, 89, 13, 39, 65, 91, 15, 41, 67, 93, 17, 43, 69, 95, 19, 45, 71, 97, 21, 47, 73, 99, 23, 49, 75, 101, 25, 51, 77, 103, 1, 27, 53, 79, 3, 29, 55, 81, 5, 31, 57, 83, 7, 33, 59, 85, 9, 35, 61, 87, 11, 37
};

int mapDeintstreamQpsk[208] = {
  0, 26, 52, 78, 104, 130, 156, 182, 2, 28, 54, 80, 106, 132, 158, 184, 4, 30, 56, 82, 108, 134, 160, 186, 6, 32, 58, 84, 110, 136, 162, 188, 8, 34, 60, 86, 112, 138, 164, 190, 10, 36, 62, 88, 114, 140, 166, 192, 12, 38, 64, 90,
  116, 142, 168, 194, 14, 40, 66, 92, 118, 144, 170, 196, 16, 42, 68, 94, 120, 146, 172, 198, 18, 44, 70, 96, 122, 148, 174, 200, 20, 46, 72, 98, 124, 150, 176, 202, 22, 48, 74, 100, 126, 152, 178, 204, 24, 50, 76, 102, 128, 154, 180, 206,
  115, 141, 167, 193, 13, 39, 65, 91, 117, 143, 169, 195, 15, 41, 67, 93, 119, 145, 171, 197, 17, 43, 69, 95, 121, 147, 173, 199, 19, 45, 71, 97, 123, 149, 175, 201, 21, 47, 73, 99, 125, 151, 177, 203, 23, 49, 75, 101, 127, 153, 179, 205,
  25, 51, 77, 103, 129, 155, 181, 207, 1, 27, 53, 79, 105, 131, 157, 183, 3, 29, 55, 81, 107, 133, 159, 185, 5, 31, 57, 83, 109, 135, 161, 187, 7, 33, 59, 85, 111, 137, 163, 189, 9, 35, 61, 87, 113, 139, 165, 191, 11, 37, 63, 89
};

int mapDeintstream16Qam[416] = {
  0, 25, 52, 77, 104, 129, 156, 181, 208, 233, 260, 285, 312, 337, 364, 389, 28, 1, 80, 53, 132, 105, 184, 157, 236, 209, 288, 261, 340, 313, 392, 365, 4, 29, 56, 81, 108, 133, 160, 185, 212, 237, 264, 289, 316, 341, 368, 393, 32, 5, 84, 57,
  136, 109, 188, 161, 240, 213, 292, 265, 344, 317, 396, 369, 8, 33, 60, 85, 112, 137, 164, 189, 216, 241, 268, 293, 320, 345, 372, 397, 36, 9, 88, 61, 140, 113, 192, 165, 244, 217, 296, 269, 348, 321, 400, 373, 12, 37, 64, 89, 116, 141, 168, 193,
  220, 245, 272, 297, 324, 349, 376, 401, 40, 13, 92, 65, 144, 117, 196, 169, 248, 221, 300, 273, 352, 325, 404, 377, 16, 41, 68, 93, 120, 145, 172, 197, 224, 249, 276, 301, 328, 353, 380, 405, 44, 17, 96, 69, 148, 121, 200, 173, 252, 225, 304, 277,
  356, 329, 408, 381, 20, 45, 72, 97, 124, 149, 176, 201, 228, 253, 280, 305, 332, 357, 384, 409, 48, 21, 100, 73, 152, 125, 204, 177, 256, 229, 308, 281, 360, 333, 412, 385, 24, 49, 76, 101, 128, 153, 180, 205, 232, 257, 284, 309, 336, 361, 388, 413,
  246, 219, 298, 271, 350, 323, 402, 375, 14, 39, 66, 91, 118, 143, 170, 195, 222, 247, 274, 299, 326, 351, 378, 403, 42, 15, 94, 67, 146, 119, 198, 171, 250, 223, 302, 275, 354, 327, 406, 379, 18, 43, 70, 95, 122, 147, 174, 199, 226, 251, 278, 303,
  330, 355, 382, 407, 46, 19, 98, 71, 150, 123, 202, 175, 254, 227, 306, 279, 358, 331, 410, 383, 22, 47, 74, 99, 126, 151, 178, 203, 230, 255, 282, 307, 334, 359, 386, 411, 50, 23, 102, 75, 154, 127, 206, 179, 258, 231, 310, 283, 362, 335, 414, 387,
  26, 51, 78, 103, 130, 155, 182, 207, 234, 259, 286, 311, 338, 363, 390, 415, 2, 27, 54, 79, 106, 131, 158, 183, 210, 235, 262, 287, 314, 339, 366, 391, 30, 3, 82, 55, 134, 107, 186, 159, 238, 211, 290, 263, 342, 315, 394, 367, 6, 31, 58, 83,
  110, 135, 162, 187, 214, 239, 266, 291, 318, 343, 370, 395, 34, 7, 86, 59, 138, 111, 190, 163, 242, 215, 294, 267, 346, 319, 398, 371, 10, 35, 62, 87, 114, 139, 166, 191, 218, 243, 270, 295, 322, 347, 374, 399, 38, 11, 90, 63, 142, 115, 194, 167
};

int mapDeintstream64Qam[624] = {
  0, 25, 50, 78, 103, 128, 156, 181, 206, 234, 259, 284, 312, 337, 362, 390, 415, 440, 468, 493, 518, 546, 571, 596, 26, 54, 1, 104, 132, 79, 182, 210, 157, 260, 288, 235, 338, 366, 313, 416, 444, 391, 494, 522, 469, 572, 600, 547, 55, 2, 30, 133,
  80, 108, 211, 158, 186, 289, 236, 264, 367, 314, 342, 445, 392, 420, 523, 470, 498, 601, 548, 576, 6, 31, 56, 84, 109, 134, 162, 187, 212, 240, 265, 290, 318, 343, 368, 396, 421, 446, 474, 499, 524, 552, 577, 602, 32, 60, 7, 110, 138, 85, 188, 216,
  163, 266, 294, 241, 344, 372, 319, 422, 450, 397, 500, 528, 475, 578, 606, 553, 61, 8, 36, 139, 86, 114, 217, 164, 192, 295, 242, 270, 373, 320, 348, 451, 398, 426, 529, 476, 504, 607, 554, 582, 12, 37, 62, 90, 115, 140, 168, 193, 218, 246, 271, 296,
  324, 349, 374, 402, 427, 452, 480, 505, 530, 558, 583, 608, 38, 66, 13, 116, 144, 91, 194, 222, 169, 272, 300, 247, 350, 378, 325, 428, 456, 403, 506, 534, 481, 584, 612, 559, 67, 14, 42, 145, 92, 120, 223, 170, 198, 301, 248, 276, 379, 326, 354, 457,
  404, 432, 535, 482, 510, 613, 560, 588, 18, 43, 68, 96, 121, 146, 174, 199, 224, 252, 277, 302, 330, 355, 380, 408, 433, 458, 486, 511, 536, 564, 589, 614, 44, 72, 19, 122, 150, 97, 200, 228, 175, 278, 306, 253, 356, 384, 331, 434, 462, 409, 512, 540,
  487, 590, 618, 565, 73, 20, 48, 151, 98, 126, 229, 176, 204, 307, 254, 282, 385, 332, 360, 463, 410, 438, 541, 488, 516, 619, 566, 594, 24, 49, 74, 102, 127, 152, 180, 205, 230, 258, 283, 308, 336, 361, 386, 414, 439, 464, 492, 517, 542, 570, 595, 620,
  376, 323, 351, 454, 401, 429, 532, 479, 507, 610, 557, 585, 15, 40, 65, 93, 118, 143, 171, 196, 221, 249, 274, 299, 327, 352, 377, 405, 430, 455, 483, 508, 533, 561, 586, 611, 41, 69, 16, 119, 147, 94, 197, 225, 172, 275, 303, 250, 353, 381, 328, 431,
  459, 406, 509, 537, 484, 587, 615, 562, 70, 17, 45, 148, 95, 123, 226, 173, 201, 304, 251, 279, 382, 329, 357, 460, 407, 435, 538, 485, 513, 616, 563, 591, 21, 46, 71, 99, 124, 149, 177, 202, 227, 255, 280, 305, 333, 358, 383, 411, 436, 461, 489, 514,
  539, 567, 592, 617, 47, 75, 22, 125, 153, 100, 203, 231, 178, 281, 309, 256, 359, 387, 334, 437, 465, 412, 515, 543, 490, 593, 621, 568, 76, 23, 51, 154, 101, 129, 232, 179, 207, 310, 257, 285, 388, 335, 363, 466, 413, 441, 544, 491, 519, 622, 569, 597,
  27, 52, 77, 105, 130, 155, 183, 208, 233, 261, 286, 311, 339, 364, 389, 417, 442, 467, 495, 520, 545, 573, 598, 623, 3, 28, 53, 81, 106, 131, 159, 184, 209, 237, 262, 287, 315, 340, 365, 393, 418, 443, 471, 496, 521, 549, 574, 599, 29, 57, 4, 107,
  135, 82, 185, 213, 160, 263, 291, 238, 341, 369, 316, 419, 447, 394, 497, 525, 472, 575, 603, 550, 58, 5, 33, 136, 83, 111, 214, 161, 189, 292, 239, 267, 370, 317, 345, 448, 395, 423, 526, 473, 501, 604, 551, 579, 9, 34, 59, 87, 112, 137, 165, 190,
  215, 243, 268, 293, 321, 346, 371, 399, 424, 449, 477, 502, 527, 555, 580, 605, 35, 63, 10, 113, 141, 88, 191, 219, 166, 269, 297, 244, 347, 375, 322, 425, 453, 400, 503, 531, 478, 581, 609, 556, 64, 11, 39, 142, 89, 117, 220, 167, 195, 298, 245, 273,
};

int mapDeintstream256Qam[832] = {
  0, 25, 50, 75, 104, 129, 154, 179, 208, 233, 258, 283, 312, 337, 362, 387, 416, 441, 466, 491, 520, 545, 570, 595, 624, 649, 674, 699, 728, 753, 778, 803, 26, 51, 80, 1, 130, 155, 184, 105, 234, 259, 288, 209, 338, 363, 392, 313, 442, 467, 496, 417,
  546, 571, 600, 521, 650, 675, 704, 625, 754, 779, 808, 729, 56, 81, 2, 27, 160, 185, 106, 131, 264, 289, 210, 235, 368, 393, 314, 339, 472, 497, 418, 443, 576, 601, 522, 547, 680, 705, 626, 651, 784, 809, 730, 755, 82, 3, 32, 57, 186, 107, 136, 161,
  290, 211, 240, 265, 394, 315, 344, 369, 498, 419, 448, 473, 602, 523, 552, 577, 706, 627, 656, 681, 810, 731, 760, 785, 8, 33, 58, 83, 112, 137, 162, 187, 216, 241, 266, 291, 320, 345, 370, 395, 424, 449, 474, 499, 528, 553, 578, 603, 632, 657, 682, 707,
  736, 761, 786, 811, 34, 59, 88, 9, 138, 163, 192, 113, 242, 267, 296, 217, 346, 371, 400, 321, 450, 475, 504, 425, 554, 579, 608, 529, 658, 683, 712, 633, 762, 787, 816, 737, 64, 89, 10, 35, 168, 193, 114, 139, 272, 297, 218, 243, 376, 401, 322, 347,
  480, 505, 426, 451, 584, 609, 530, 555, 688, 713, 634, 659, 792, 817, 738, 763, 90, 11, 40, 65, 194, 115, 144, 169, 298, 219, 248, 273, 402, 323, 352, 377, 506, 427, 456, 481, 610, 531, 560, 585, 714, 635, 664, 689, 818, 739, 768, 793, 16, 41, 66, 91,
  120, 145, 170, 195, 224, 249, 274, 299, 328, 353, 378, 403, 432, 457, 482, 507, 536, 561, 586, 611, 640, 665, 690, 715, 744, 769, 794, 819, 42, 67, 96, 17, 146, 171, 200, 121, 250, 275, 304, 225, 354, 379, 408, 329, 458, 483, 512, 433, 562, 587, 616, 537,
  666, 691, 720, 641, 770, 795, 824, 745, 72, 97, 18, 43, 176, 201, 122, 147, 280, 305, 226, 251, 384, 409, 330, 355, 488, 513, 434, 459, 592, 617, 538, 563, 696, 721, 642, 667, 800, 825, 746, 771, 98, 19, 48, 73, 202, 123, 152, 177, 306, 227, 256, 281,
  410, 331, 360, 385, 514, 435, 464, 489, 618, 539, 568, 593, 722, 643, 672, 697, 826, 747, 776, 801, 24, 49, 74, 99, 128, 153, 178, 203, 232, 257, 282, 307, 336, 361, 386, 411, 440, 465, 490, 515, 544, 569, 594, 619, 648, 673, 698, 723, 752, 777, 802, 827,
  454, 479, 508, 429, 558, 583, 612, 533, 662, 687, 716, 637, 766, 791, 820, 741, 68, 93, 14, 39, 172, 197, 118, 143, 276, 301, 222, 247, 380, 405, 326, 351, 484, 509, 430, 455, 588, 613, 534, 559, 692, 717, 638, 663, 796, 821, 742, 767, 94, 15, 44, 69,
  198, 119, 148, 173, 302, 223, 252, 277, 406, 327, 356, 381, 510, 431, 460, 485, 614, 535, 564, 589, 718, 639, 668, 693, 822, 743, 772, 797, 20, 45, 70, 95, 124, 149, 174, 199, 228, 253, 278, 303, 332, 357, 382, 407, 436, 461, 486, 511, 540, 565, 590, 615,
  644, 669, 694, 719, 748, 773, 798, 823, 46, 71, 100, 21, 150, 175, 204, 125, 254, 279, 308, 229, 358, 383, 412, 333, 462, 487, 516, 437, 566, 591, 620, 541, 670, 695, 724, 645, 774, 799, 828, 749, 76, 101, 22, 47, 180, 205, 126, 151, 284, 309, 230, 255,
  388, 413, 334, 359, 492, 517, 438, 463, 596, 621, 542, 567, 700, 725, 646, 671, 804, 829, 750, 775, 102, 23, 52, 77, 206, 127, 156, 181, 310, 231, 260, 285, 414, 335, 364, 389, 518, 439, 468, 493, 622, 543, 572, 597, 726, 647, 676, 701, 830, 751, 780, 805,
  28, 53, 78, 103, 132, 157, 182, 207, 236, 261, 286, 311, 340, 365, 390, 415, 444, 469, 494, 519, 548, 573, 598, 623, 652, 677, 702, 727, 756, 781, 806, 831, 4, 29, 54, 79, 108, 133, 158, 183, 212, 237, 262, 287, 316, 341, 366, 391, 420, 445, 470, 495,
  524, 549, 574, 599, 628, 653, 678, 703, 732, 757, 782, 807, 30, 55, 84, 5, 134, 159, 188, 109, 238, 263, 292, 213, 342, 367, 396, 317, 446, 471, 500, 421, 550, 575, 604, 525, 654, 679, 708, 629, 758, 783, 812, 733, 60, 85, 6, 31, 164, 189, 110, 135,
  268, 293, 214, 239, 372, 397, 318, 343, 476, 501, 422, 447, 580, 605, 526, 551, 684, 709, 630, 655, 788, 813, 734, 759, 86, 7, 36, 61, 190, 111, 140, 165, 294, 215, 244, 269, 398, 319, 348, 373, 502, 423, 452, 477, 606, 527, 556, 581, 710, 631, 660, 685,
  814, 735, 764, 789, 12, 37, 62, 87, 116, 141, 166, 191, 220, 245, 270, 295, 324, 349, 374, 399, 428, 453, 478, 503, 532, 557, 582, 607, 636, 661, 686, 711, 740, 765, 790, 815, 38, 63, 92, 13, 142, 167, 196, 117, 246, 271, 300, 221, 350, 375, 404, 325,
};

int mapDeshiftFftLegacy[64] = {
  -1, 24, 25, 26, 27, 28, 29, -1, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, -1, 43, 44, 45, 46, 47, -1, -1, -1, -1, -1, 
  -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, -1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, -1, 18, 19, 20, 21, 22, 23};
int mapDeshiftFftNonlegacy[64] = {
  -1, 26, 27, 28, 29, 30, 31, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, -1, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, 
  -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, -1, 20, 21, 22, 23, 24, 25};
cuFloatComplex* demodChanSiso;
cuFloatComplex* demodChanMimo;
cuFloatComplex* demodChanMimoInv;
cuFloatComplex* demodSig;
cuFloatComplex* demodSigFft;
cufftHandle demodPlan;
cuFloatComplex* pilotsLegacy;
cuFloatComplex* pilotsHt;
cuFloatComplex* pilotsHt2;
cuFloatComplex* pilotsVht;
cuFloatComplex* pilotsVht2;
cuFloatComplex* pilotsNlLtf2;
float* demodSigLlr;

int* demodDemapFftL;
int* demodDemapBpskL;
int* demodDemapQpskL;
int* demodDemap16QamL;
int* demodDemap64QamL;
int* demodDemapL[6] = {NULL, NULL, NULL, NULL, NULL, NULL};

int* demodDemapFftNL;
int* demodDemapBpskNL;
int* demodDemapQpskNL;
int* demodDemap16QamNL;
int* demodDemap64QamNL;
int* demodDemap256QamNL;
int* demodDemapNL[6] = {NULL, NULL, NULL, NULL, NULL, NULL};

int* demodDemapBpskNL2;
int* demodDemapQpskNL2;
int* demodDemap16QamNL2;
int* demodDemap64QamNL2;
int* demodDemap256QamNL2;
int* demodDemapNL2[6] = {NULL, NULL, NULL, NULL, NULL, NULL};

int* cuv_seq;
int* cuv_seqtb;
int* cuv_state_his;
int* cuv_state_next;
int* cuv_state_output;
int* cuv_cr_punc;
unsigned char* cuv_bits;
unsigned char* cuv_descram_seq;
unsigned char* cuv_bytes;

__global__
void cuDemodChopSamp(int n, cuFloatComplex* sig, cuFloatComplex* sigfft)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = i / 80;       // symbol index
  int offset = i % 80;  
  if(i < n && offset >= 8 && offset < 72)
  {
    sigfft[j*64 + offset - 8] = sig[i];
  }
}

__global__
void cuDemodChanComp(int n, cuFloatComplex* sigfft, cuFloatComplex* chan)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int offset = i % 64;
  if(i < n)
  {
    sigfft[i] = cuCdivf(sigfft[i], chan[offset]);
  }
}

__global__
void cuDemodChanComp2(int n, cuFloatComplex* sigfft, cuFloatComplex* chan, cuFloatComplex* chaninv)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  cuFloatComplex tmp1, tmp2;
  int offset = i % 64;
  if(i < n)
  {
    tmp1 = cuCaddf(cuCmulf(sigfft[i], cuConjf(chan[offset])), cuCmulf(sigfft[i+n], cuConjf(chan[offset+64])));
    tmp2 = cuCaddf(cuCmulf(sigfft[i], cuConjf(chan[offset+128])), cuCmulf(sigfft[i+n], cuConjf(chan[offset+192])));
    sigfft[i] = cuCaddf(cuCmulf(tmp1, chaninv[offset]), cuCmulf(tmp2, chaninv[offset+128]));
    sigfft[i+n] = cuCaddf(cuCmulf(tmp1, chaninv[offset+64]), cuCmulf(tmp2, chaninv[offset+192]));
  }
}

__global__
void cuDemodQamToLlr(int n, int nCBPSS, cuFloatComplex* sigfft, float* llr, cuFloatComplex* p, int* deshift, int* deint)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = i / 64;  // sym index
  int k = i % 64;  // sample index
  int llrOffset = j * nCBPSS;
  cuFloatComplex pilotConj = make_cuFloatComplex(0.0f, 0.0f);
  cuFloatComplex pilotAbs;
  cuFloatComplex qam;
  float qamReal, qamImag;
  int scIndex = deshift[k];      // sc after fft to data sc index

  if(i >= n || scIndex < 0)
  {
    return;
  }

  pilotConj = cuCaddf(pilotConj, cuCmulf(sigfft[j*64 + 43], p[j*4]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(sigfft[j*64 + 57], p[j*4+1]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(sigfft[j*64 +  7], p[j*4+2]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(sigfft[j*64 + 21], p[j*4+3]));
  pilotAbs = make_cuFloatComplex(cuCabsf(pilotConj), 0.0f);
  pilotConj = cuConjf(pilotConj);

  qam = cuCdivf(cuCmulf(sigfft[i], pilotConj), pilotAbs);

  if(nCBPSS == 48 || nCBPSS == 52)
  {
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deint[scIndex]] = qamReal;
  }
  else if(nCBPSS == 96 || nCBPSS == 104)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(1.4142135623730951f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deint[scIndex*2]] = qamReal;
    llr[llrOffset + deint[scIndex*2+1]] = qamImag;
  }
  else if(nCBPSS == 192 || nCBPSS == 208)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(3.1622776601683795f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deint[scIndex*4]] = qamReal;
    llr[llrOffset + deint[scIndex*4+1]] = 2.0f - fabsf(qamReal);
    llr[llrOffset + deint[scIndex*4+2]] = qamImag;
    llr[llrOffset + deint[scIndex*4+3]] = 2.0f - fabsf(qamImag);
  }
  else if(nCBPSS == 288 || nCBPSS == 312)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(6.48074069840786f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deint[scIndex*6]] = qamReal;
    llr[llrOffset + deint[scIndex*6+1]] = 4.0f - fabsf(qamReal);
    llr[llrOffset + deint[scIndex*6+2]] = 2.0f - fabsf(4.0f - fabsf(qamReal));
    llr[llrOffset + deint[scIndex*6+3]] = qamImag;
    llr[llrOffset + deint[scIndex*6+4]] = 4.0f - fabsf(qamImag);
    llr[llrOffset + deint[scIndex*6+5]] = 2.0f - fabsf(4.0f - fabsf(qamImag));
  }
  else
  {
    qam = cuCmulf(qam, make_cuFloatComplex(13.038404810405298f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deint[scIndex*8]] = qamReal;
    llr[llrOffset + deint[scIndex*8+1]] = 8.0f - fabsf(qamReal);
    llr[llrOffset + deint[scIndex*8+2]] = 4.0f - fabsf(8.0f - fabsf(qamReal));
    llr[llrOffset + deint[scIndex*8+3]] = 2.0f - fabsf(4.0f - fabsf(8.0f - fabsf(qamReal)));
    llr[llrOffset + deint[scIndex*8+4]] = qamImag;
    llr[llrOffset + deint[scIndex*8+5]] = 8.0f - fabsf(qamImag);
    llr[llrOffset + deint[scIndex*8+6]] = 4.0f - fabsf(8.0f - fabsf(qamImag));
    llr[llrOffset + deint[scIndex*8+7]] = 2.0f - fabsf(4.0f - fabsf(8.0f - fabsf(qamImag)));
  }
  // sigfft[i] = make_cuFloatComplex(llrOffset + scIndex*2, llrOffset + scIndex*2 + 1);
}

__global__
void cuDemodQamToLlr2(int n, int nCBPS, cuFloatComplex* sigfft, float* llr, cuFloatComplex* p, cuFloatComplex* pltf, int* deshift, int* deintstream)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j;  // sym index
  int j2; // sym index with shift for ss2
  int k = i % 64;  // sample index
  int llrOffset;
  int nCbpssShift;
  cuFloatComplex pilotConj = make_cuFloatComplex(0.0f, 0.0f);
  cuFloatComplex pilotAbs;
  cuFloatComplex qam;
  float qamReal, qamImag;
  int scIndex = deshift[k];      // sc after fft to data sc index, 0 to 51

  if(i >= n || scIndex < 0)
  {
    return;
  }
  if(i >= (n/2))
  {
    j = (i-n/2) / 64;
    j2 = i / 64;
    llrOffset = j * nCBPS;
    nCbpssShift = nCBPS / 2;
  }
  else
  {
    j = i / 64;
    j2 = j + (n/2)/64;
    llrOffset = j * nCBPS;
    nCbpssShift = 0;
  }

  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j*64 + 43], p[j*8]), pltf[0]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j*64 + 57], p[j*8+1]), pltf[1]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j*64 +  7], p[j*8+2]), pltf[2]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j*64 + 21], p[j*8+3]), pltf[3]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j2*64 + 43], p[j*8+4]), pltf[4]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j2*64 + 57], p[j*8+5]), pltf[5]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j2*64 +  7], p[j*8+6]), pltf[6]));
  pilotConj = cuCaddf(pilotConj, cuCmulf(cuCmulf(sigfft[j2*64 + 21], p[j*8+7]), pltf[7]));
  pilotAbs = make_cuFloatComplex(cuCabsf(pilotConj), 0.0f);
  pilotConj = cuConjf(pilotConj);

  qam = cuCdivf(cuCmulf(sigfft[i], pilotConj), pilotAbs);

  if(nCBPS == 104)
  {
    qamReal = cuCrealf(qam);
    llr[llrOffset + deintstream[nCbpssShift + scIndex]] = qamReal;
  }
  else if(nCBPS == 208)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(1.4142135623730951f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*2]] = qamReal;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*2+1]] = qamImag;
  }
  else if(nCBPS == 416)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(3.1622776601683795f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*4]] = qamReal;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*4+1]] = 2.0f - fabsf(qamReal);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*4+2]] = qamImag;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*4+3]] = 2.0f - fabsf(qamImag);
  }
  else if(nCBPS == 624)
  {
    qam = cuCmulf(qam, make_cuFloatComplex(6.48074069840786f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6]] = qamReal;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6+1]] = 4.0f - fabsf(qamReal);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6+2]] = 2.0f - fabsf(4.0f - fabsf(qamReal));
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6+3]] = qamImag;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6+4]] = 4.0f - fabsf(qamImag);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*6+5]] = 2.0f - fabsf(4.0f - fabsf(qamImag));
  }
  else
  {
    qam = cuCmulf(qam, make_cuFloatComplex(13.038404810405298f, 0.0f));
    qamReal = cuCrealf(qam);
    qamImag = cuCimagf(qam);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8]] = qamReal;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+1]] = 8.0f - fabsf(qamReal);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+2]] = 4.0f - fabsf(8.0f - fabsf(qamReal));
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+3]] = 2.0f - fabsf(4.0f - fabsf(8.0f - fabsf(qamReal)));
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+4]] = qamImag;
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+5]] = 8.0f - fabsf(qamImag);
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+6]] = 4.0f - fabsf(8.0f - fabsf(qamImag));
    llr[llrOffset + deintstream[nCbpssShift + scIndex*8+7]] = 2.0f - fabsf(4.0f - fabsf(8.0f - fabsf(qamImag)));
  }
  // sigfft[i] = make_cuFloatComplex(llrOffset + scIndex*2, llrOffset + scIndex*2 + 1);
}

__global__ void cuDecodeViterbi(float* llr,
                                int len,
                                int trellis,
                                int crlen,
                                int* punc,
                                int* s_his,
                                int* s_output,
                                int* s_next)
{
    int i = threadIdx.x;
    int v_cr_p = 0;
    int tmpUsed = 0;
    float *v_ae_pPre, *v_ae_pCur, *v_ae_pTmp;
    float v_acc_tmp0, v_acc_tmp1;
    int v_next0, v_next1;
    int v_t = 0;
    __shared__ float v_accum_err0[64];
    __shared__ float v_accum_err1[64];
    __shared__ float v_tab_t[4];
    __shared__ int v_punc[10];
    __shared__ int v_output[128];
    __shared__ int v_next[128];

    if (i < crlen) {
        v_punc[i] = punc[i];
    }

    v_output[i * 2] = s_output[i * 2];
    v_output[i * 2 + 1] = s_output[i * 2 + 1];
    v_next[i * 2] = s_next[i * 2];
    v_next[i * 2 + 1] = s_next[i * 2 + 1];

    if (i == 0) {
        v_accum_err0[i] = 0.0f;
    } else {
        v_accum_err0[i] = -1000000000000000.0f;
    }
    v_accum_err1[i] = -1000000000000000.0f;
    v_ae_pCur = v_accum_err1;
    v_ae_pPre = v_accum_err0;

    __syncthreads();
    while ((tmpUsed + v_punc[v_cr_p] + v_punc[v_cr_p + 1]) <= len && v_t < trellis) {
        if (i == 0) {
            v_tab_t[0] = 0.0f;
            if (v_punc[v_cr_p]) {
                v_tab_t[2] = llr[tmpUsed];
                v_tab_t[3] = llr[tmpUsed];
                tmpUsed++;
            } else {
                v_tab_t[2] = 0.0f;
                v_tab_t[3] = 0.0f;
            }
            if (v_punc[v_cr_p + 1]) {
                v_tab_t[1] = llr[tmpUsed];
                v_tab_t[3] += llr[tmpUsed];
                tmpUsed++;
            } else {
                v_tab_t[1] = 0.0f;
            }
        }

        __syncthreads();
        v_acc_tmp0 = v_ae_pPre[i] + v_tab_t[v_output[i * 2]];
        v_acc_tmp1 = v_ae_pPre[i] + v_tab_t[v_output[i * 2 + 1]];

        if ((i % 2) == 0) {
            v_next0 = v_next[i * 2];
            v_next1 = v_next[i * 2 + 1];
            if (v_acc_tmp0 > v_ae_pCur[v_next0]) {
                v_ae_pCur[v_next0] = v_acc_tmp0;
                s_his[(v_t + 1) * 64 + v_next0] = i;
            }
            if (v_acc_tmp1 > v_ae_pCur[v_next1]) {
                v_ae_pCur[v_next1] = v_acc_tmp1;
                s_his[(v_t + 1) * 64 + v_next1] = i;
            }
        }

        __syncthreads();
        if ((i % 2) == 1) {
            v_next0 = v_next[i * 2];
            v_next1 = v_next[i * 2 + 1];
            if (v_acc_tmp0 > v_ae_pCur[v_next0]) {
                v_ae_pCur[v_next0] = v_acc_tmp0;
                s_his[(v_t + 1) * 64 + v_next0] = i;
            }
            if (v_acc_tmp1 > v_ae_pCur[v_next1]) {
                v_ae_pCur[v_next1] = v_acc_tmp1;
                s_his[(v_t + 1) * 64 + v_next1] = i;
            }
        }

        __syncthreads();
        v_ae_pTmp = v_ae_pPre;
        v_ae_pPre = v_ae_pCur;
        v_ae_pCur = v_ae_pTmp;
        v_ae_pCur[i] = -1000000000000000.0f;
        v_cr_p += 2;
        if (v_cr_p >= crlen) {
            v_cr_p = 0;
        }
        v_t++;
    }
}

__global__ void cuDecodeTb1(int trellis, int* s_his, int* s_seq)
{
    s_seq[trellis] = 0;
    for (int j = trellis; j > 0; j--) {
        s_seq[j - 1] = s_his[j * 64 + s_seq[j]];
    }
}

__global__ void cuDecodeTb2(int trellis, int* s_seq, int* s_next, unsigned char* bits)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i >= trellis) {
        return;
    }
    if (s_seq[i + 1] == s_next[s_seq[i] * 2 + 1]) {
        bits[i] = 1;
    } else {
        bits[i] = 0;
    }
}

__global__ void cuDecodeTbs(int trellis, int* s_seqtb, int* s_his, int* s_next, unsigned char* bits)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j;
    int *p_seq;
    if(i > (trellis-CUDEMOD_VTB_LEN))
    {
        return;
    }

    p_seq = &s_seqtb[i * (CUDEMOD_VTB_LEN + 1)];
    p_seq[CUDEMOD_VTB_LEN] = 0;
    for (j = CUDEMOD_VTB_LEN; j > 0; j--) {
        p_seq[j - 1] = s_his[j * 64 + i * 64 + p_seq[j]];
    }
    if(i == (trellis-CUDEMOD_VTB_LEN))
    {
        for(j=0;j<CUDEMOD_VTB_LEN;j++)
        {
            if (p_seq[j + 1] == s_next[p_seq[j] * 2 + 1]) {
                bits[i+j] = 1;
            } else {
                bits[i+j] = 0;
            }
        }
    }
    else
    {
        if (p_seq[1] == s_next[p_seq[0] * 2 + 1]) {
            bits[i] = 1;
        } else {
            bits[i] = 0;
        }
    }
}

__global__ void cuDecodeDescram(int trellis, unsigned char* bits, unsigned char* desseq)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  __shared__ int v_descram_init;
  if (i >= trellis) {
    return;
  }

  if (threadIdx.x == 0) {   // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! shared value only shared by threads in the same block
    v_descram_init = 0;
    for (int j = 0; j < 7; j++) {
        v_descram_init |= (bits[j] << j);
    }
    v_descram_init = v_descram_init * 127;
  }

  __syncthreads();
  if (i < 7) {
    bits[i] = 0;
  } else {
    bits[i] = bits[i] ^ desseq[v_descram_init + ((i - 7) % 127)];
  }
}

__global__ void cuDecodeB2B(int n, unsigned char* bits, unsigned char* bytes)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i >= n)
  {
    return;
  }
  bytes[i] = 0;
  for(int j=0;j<8;j++)
  {
    bytes[i] |= (bits[i*8+j]<<j);
  }
}

void cuDemodMall()
{
  cudaError_t err;
  err = cudaMalloc(&demodChanSiso, sizeof(cuFloatComplex) * 64);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso chan error."<<std::endl;}
  err = cudaMalloc(&demodSig, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 80);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso sig error."<<std::endl;}
  err = cudaMalloc(&demodSigFft, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 64);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso sig fft error."<<std::endl;}
  cufftResult errfft = cufftPlan1d(&demodPlan, 64, CUFFT_C2C, CUDEMOD_FFT_BATCH);
  if(errfft){ std::cout<<"cloud80211 cufft, plan creation failed"<<std::endl;}
  err = cudaMalloc(&pilotsLegacy, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso legacy pilots error."<<std::endl;}
  err = cudaMalloc(&pilotsHt, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso ht pilots error."<<std::endl;}
  err = cudaMalloc(&pilotsVht, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso vht pilots error."<<std::endl;}
  cuFloatComplex pListTmp[CUDEMOD_S_MAX * 4];
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(-1.0f * PILOT_P[(i+1)%127], 0.0f);
  }
  cudaMemcpy(pilotsLegacy, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  float pTmp[4] = {1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(pTmp[0] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(pTmp[1] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(pTmp[2] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(pTmp[3] * PILOT_P[(i+3)%127], 0.0f);

    float tmpPilot = pTmp[0];
    pTmp[0] = pTmp[1];
    pTmp[1] = pTmp[2];
    pTmp[2] = pTmp[3];
    pTmp[3] = tmpPilot;
  }
  cudaMemcpy(pilotsHt, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  float pTmp2[4] = {1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(pTmp2[0] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(pTmp2[1] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(pTmp2[2] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(pTmp2[3] * PILOT_P[(i+4)%127], 0.0f);

    float tmpPilot = pTmp2[0];
    pTmp2[0] = pTmp2[1];
    pTmp2[1] = pTmp2[2];
    pTmp2[2] = pTmp2[3];
    pTmp2[3] = tmpPilot;
  }
  cudaMemcpy(pilotsVht, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  err = cudaMalloc(&demodSigLlr, sizeof(float) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211 demodcu, malloc llr error."<<std::endl;}
  cudaMemset(demodSigLlr, 0, sizeof(float) * CUDEMOD_L_MAX);
  
  err = cudaMalloc(&demodDemapFftL, sizeof(int) * 64);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso legacy fft shift error."<<std::endl;}
  cudaMemcpy(demodDemapFftL, mapDeshiftFftLegacy, 64*sizeof(int), cudaMemcpyHostToDevice);
  err = cudaMalloc(&demodDemapFftNL, sizeof(int) * 64);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso non legacy fft shift error."<<std::endl;}
  cudaMemcpy(demodDemapFftNL, mapDeshiftFftNonlegacy, 64*sizeof(int), cudaMemcpyHostToDevice);
  err = cudaMalloc(&demodDemapBpskL, sizeof(int) * 48);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint legacy bpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemapQpskL, sizeof(int) * 96);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint legacy qpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemap16QamL, sizeof(int) * 192);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint legacy 16qam error."<<std::endl;}
  err = cudaMalloc(&demodDemap64QamL, sizeof(int) * 288);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint legacy 64qam error."<<std::endl;}
  err = cudaMalloc(&demodDemapBpskNL, sizeof(int) * 52);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint non legacy bpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemapQpskNL, sizeof(int) * 104);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint non legacy qpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemap16QamNL, sizeof(int) * 208);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint non legacy 16qam error."<<std::endl;}
  err = cudaMalloc(&demodDemap64QamNL, sizeof(int) * 312);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint non legacy 64qam error."<<std::endl;}
  err = cudaMalloc(&demodDemap256QamNL, sizeof(int) * 416);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso deint non legacy 256qam error."<<std::endl;}
  cudaMemcpy(demodDemapBpskL, mapDeintLegacyBpsk, 48*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemapQpskL, mapDeintLegacyQpsk, 96*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap16QamL, mapDeintLegacy16Qam, 192*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap64QamL, mapDeintLegacy64Qam, 288*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemapBpskNL, mapDeintNonlegacyBpsk, 52*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemapQpskNL, mapDeintNonlegacyQpsk, 104*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap16QamNL, mapDeintNonlegacy16Qam, 208*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap64QamNL, mapDeintNonlegacy64Qam, 312*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap256QamNL, mapDeintNonlegacy256Qam, 416*sizeof(int), cudaMemcpyHostToDevice);
  demodDemapL[C8P_QAM_BPSK] = demodDemapBpskL;
  demodDemapL[C8P_QAM_QPSK] = demodDemapQpskL;
  demodDemapL[C8P_QAM_16QAM] = demodDemap16QamL;
  demodDemapL[C8P_QAM_64QAM] = demodDemap64QamL;
  demodDemapNL[C8P_QAM_BPSK] = demodDemapBpskNL;
  demodDemapNL[C8P_QAM_QPSK] = demodDemapQpskNL;
  demodDemapNL[C8P_QAM_16QAM] = demodDemap16QamNL;
  demodDemapNL[C8P_QAM_64QAM] = demodDemap64QamNL;
  demodDemapNL[C8P_QAM_256QAM] = demodDemap256QamNL;

  err = cudaMalloc(&cuv_seq, sizeof(int) * (CUDEMOD_T_MAX + 1));
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode seq error."<<std::endl;}
  err = cudaMalloc(&cuv_seqtb, sizeof(int) * (CUDEMOD_T_MAX + 1)*(CUDEMOD_VTB_LEN + 1));
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode seqtb error."<<std::endl;}
  err = cudaMalloc(&cuv_bits, sizeof(unsigned char) * CUDEMOD_T_MAX);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode bits error."<<std::endl;}
  err = cudaMalloc(&cuv_bytes, sizeof(unsigned char) * CUDEMOD_B_MAX);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode bytes error."<<std::endl;}
  err = cudaMalloc(&cuv_state_his, sizeof(int) * 64 * (CUDEMOD_T_MAX + 1));
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode state his error."<<std::endl;}
  err = cudaMalloc(&cuv_state_next, sizeof(int) * 128);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode state next error."<<std::endl;}
  cudaMemcpy(cuv_state_next, SV_STATE_NEXT, 128 * sizeof(int), cudaMemcpyHostToDevice);
  err = cudaMalloc(&cuv_state_output, sizeof(int) * 128);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode state output error."<<std::endl;}
  cudaMemcpy(cuv_state_output, SV_STATE_OUTPUT, 128 * sizeof(int), cudaMemcpyHostToDevice);
  err = cudaMalloc(&cuv_cr_punc, sizeof(int) * 22);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode punc map error."<<std::endl;}
  int tmpPunc[22] = {1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1};
  cudaMemcpy(cuv_cr_punc, tmpPunc, 22 * sizeof(int), cudaMemcpyHostToDevice);
  err = cudaMalloc(&cuv_descram_seq, sizeof(unsigned char) * 128 * 127);
  if(err){ std::cout<<"cloud80211 demodcu, malloc decode descramble seq error."<<std::endl;}
  cudaMemcpy(cuv_descram_seq, descramSeq, sizeof(unsigned char) * 128 * 127, cudaMemcpyHostToDevice);
}

void cuDemodMall2()
{
  cuDemodMall();
  cudaError_t err;
  err = cudaMalloc(&demodChanMimo, sizeof(cuFloatComplex) * 256);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo chan error."<<std::endl;}
  err = cudaMalloc(&demodChanMimoInv, sizeof(cuFloatComplex) * 256);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo chan inv error."<<std::endl;}
  err = cudaMalloc(&pilotsHt2, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo ht pilots 2 error."<<std::endl;}
  err = cudaMalloc(&pilotsVht2, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo vht pilots 2 error."<<std::endl;}
  err = cudaMalloc(&pilotsNlLtf2, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8);
  if(err){ std::cout<<"cloud80211 demodcu, malloc siso nl pilots ltf 2 error."<<std::endl;}
  cuFloatComplex pListTmp[CUDEMOD_S_MAX * 8];
  float pTmp[8] = {1.0f, 1.0f, -1.0f, -1.0f, 1.0f, -1.0f, -1.0f, 1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*8] = make_cuFloatComplex(pTmp[0] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+1] = make_cuFloatComplex(pTmp[1] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+2] = make_cuFloatComplex(pTmp[2] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+3] = make_cuFloatComplex(pTmp[3] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+4] = make_cuFloatComplex(pTmp[4] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+5] = make_cuFloatComplex(pTmp[5] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+6] = make_cuFloatComplex(pTmp[6] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+7] = make_cuFloatComplex(pTmp[7] * PILOT_P[(i+3)%127], 0.0f);

    float tmpPilot = pTmp[0];
    pTmp[0] = pTmp[1];
    pTmp[1] = pTmp[2];
    pTmp[2] = pTmp[3];
    pTmp[3] = tmpPilot;
    tmpPilot = pTmp[4];
    pTmp[4] = pTmp[5];
    pTmp[5] = pTmp[6];
    pTmp[6] = pTmp[7];
    pTmp[7] = tmpPilot;
  }
  cudaMemcpy(pilotsHt2, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8, cudaMemcpyHostToDevice);
  float pTmp2[8] = {1.0f, 1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*8] = make_cuFloatComplex(pTmp2[0] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+1] = make_cuFloatComplex(pTmp2[1] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+2] = make_cuFloatComplex(pTmp2[2] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+3] = make_cuFloatComplex(pTmp2[3] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+4] = make_cuFloatComplex(pTmp2[4] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+5] = make_cuFloatComplex(pTmp2[5] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+6] = make_cuFloatComplex(pTmp2[6] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+7] = make_cuFloatComplex(pTmp2[7] * PILOT_P[(i+4)%127], 0.0f);

    float tmpPilot = pTmp2[0];
    pTmp2[0] = pTmp2[1];
    pTmp2[1] = pTmp2[2];
    pTmp2[2] = pTmp2[3];
    pTmp2[3] = tmpPilot;
    tmpPilot = pTmp2[4];
    pTmp2[4] = pTmp2[5];
    pTmp2[5] = pTmp2[6];
    pTmp2[6] = pTmp2[7];
    pTmp2[7] = tmpPilot;
  }
  cudaMemcpy(pilotsVht2, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8, cudaMemcpyHostToDevice);

  err = cudaMalloc(&demodDemapBpskNL2, sizeof(int) * 104);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo deint stream non legacy bpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemapQpskNL2, sizeof(int) * 208);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo deint stream non legacy qpsk error."<<std::endl;}
  err = cudaMalloc(&demodDemap16QamNL2, sizeof(int) * 416);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo deint stream non legacy 16qam error."<<std::endl;}
  err = cudaMalloc(&demodDemap64QamNL2, sizeof(int) * 624);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo deint stream non legacy 64qam error."<<std::endl;}
  err = cudaMalloc(&demodDemap256QamNL2, sizeof(int) * 832);
  if(err){ std::cout<<"cloud80211 demodcu, malloc mimo deint stream non legacy 256qam error."<<std::endl;}
  cudaMemcpy(demodDemapBpskNL2, mapDeintstreamBpsk, 104*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemapQpskNL2, mapDeintstreamQpsk, 208*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap16QamNL2, mapDeintstream16Qam, 416*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap64QamNL2, mapDeintstream64Qam, 624*sizeof(int), cudaMemcpyHostToDevice);
  cudaMemcpy(demodDemap256QamNL2, mapDeintstream256Qam, 832*sizeof(int), cudaMemcpyHostToDevice);
  demodDemapNL2[C8P_QAM_BPSK] = demodDemapBpskNL2;
  demodDemapNL2[C8P_QAM_QPSK] = demodDemapQpskNL2;
  demodDemapNL2[C8P_QAM_16QAM] = demodDemap16QamNL2;
  demodDemapNL2[C8P_QAM_64QAM] = demodDemap64QamNL2;
  demodDemapNL2[C8P_QAM_256QAM] = demodDemap256QamNL2;
}

void cuDemodFree()
{
  cudaFree(demodChanSiso);
  cudaFree(demodSig);
  cudaFree(demodSigFft);
  cufftDestroy(demodPlan);
  cudaFree(demodSigLlr);
  cudaFree(pilotsLegacy);
  cudaFree(pilotsHt);
  cudaFree(pilotsVht);

  cudaFree(demodDemapFftL);
  cudaFree(demodDemapBpskL);
  cudaFree(demodDemapQpskL);
  cudaFree(demodDemap16QamL);
  cudaFree(demodDemap64QamL);
  cudaFree(demodDemapBpskNL);
  cudaFree(demodDemapQpskNL);
  cudaFree(demodDemap16QamNL);
  cudaFree(demodDemap64QamNL);
  cudaFree(demodDemap256QamNL);

  cudaFree(cuv_seq);
  cudaFree(cuv_seqtb);
  cudaFree(cuv_bits);
  cudaFree(cuv_bytes);
  cudaFree(cuv_state_his);
  cudaFree(cuv_state_next);
  cudaFree(cuv_state_output);
  cudaFree(cuv_cr_punc);
  cudaFree(cuv_descram_seq);
}

void cuDemodFree2()
{
  cuDemodFree();
  cudaFree(demodChanMimo);
  cudaFree(demodChanMimoInv);
  cudaFree(pilotsHt2);
  cudaFree(pilotsVht2);
  cudaFree(pilotsNlLtf2);
  cudaFree(demodDemapBpskNL2);
  cudaFree(demodDemapQpskNL2);
  cudaFree(demodDemap16QamNL2);
  cudaFree(demodDemap64QamNL2);
  cudaFree(demodDemap256QamNL2);
}

void cuDemodChanSiso(cuFloatComplex *chan)
{
  cudaMemcpy(demodChanSiso, chan, 64*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
}

void cuDemodChanMimo(cuFloatComplex *chan, cuFloatComplex *chaninv, cuFloatComplex *pilotsltf)
{
  cudaMemcpy(demodChanMimo, chan, 256*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
  cudaMemcpy(demodChanMimoInv, chaninv, 256*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
  cudaMemcpy(pilotsNlLtf2, pilotsltf, 8*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
}

void cuDemodSigCopy(int i, int n, const cuFloatComplex *sig)
{
  if(i >= 0 && n >= 0 && (i+n) < (CUDEMOD_S_MAX * 80))
  {
    cudaMemcpy(&demodSig[i], sig, n*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
  }
}

void cuDemodSigCopy2(int i, int j, int n, const cuFloatComplex *sig, const cuFloatComplex *sig2)
{
  if(i >= 0 && n >= 0 && (i+n) < (CUDEMOD_S_MAX * 80))
  {
    cudaMemcpy(&demodSig[i], sig, n*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
    cudaMemcpy(&demodSig[j], sig2, n*sizeof(cuFloatComplex), cudaMemcpyHostToDevice);
  }
}

void cuDemodSiso(c8p_mod* m, unsigned char* psduBytes)
{
  int cuv_llr_len = m->nSym * m->nCBPS;
  int* cuv_cr_punc_p;
  int cuv_cr_len;
  int cuv_trellis;
  cuFloatComplex* pilotsused;
  int* demapfftused;
  int* demapqamused;

  if(m->format == C8P_F_L)
  {
    cuv_trellis = 22 + m->len*8;
    pilotsused = pilotsLegacy;
    demapfftused = demodDemapFftL;
    demapqamused = demodDemapL[m->mod];
  }
  else if(m->format == C8P_F_HT)
  {
    cuv_trellis = 22 + m->len*8;
    pilotsused = pilotsHt;
    demapfftused = demodDemapFftNL;
    demapqamused = demodDemapNL[m->mod];
  }
  else
  {
    cuv_trellis = m->nSym * m->nDBPS;
    pilotsused = pilotsVht;
    demapfftused = demodDemapFftNL;
    demapqamused = demodDemapNL[m->mod];
  }
  cuDemodChopSamp<<<(m->nSym * m->nSymSamp)/1024 + 1, 1024>>>(m->nSym * m->nSymSamp, demodSig, demodSigFft);
  for(int symIter=0; symIter < ((m->nSym + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )   // each round inlcudes 256 batches
  {
    cufftExecC2C(demodPlan, &demodSigFft[symIter*CUDEMOD_FFT_BATCH*64], &demodSigFft[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_FORWARD);
  }
  cuDemodChanComp<<<(m->nSym * 64)/1024 + 1, 1024>>>(m->nSym * 64, demodSigFft, demodChanSiso);
  cuDemodQamToLlr<<<(m->nSym * 64)/1024 + 1, 1024>>>(m->nSym * 64, m->nCBPSS, demodSigFft, demodSigLlr, pilotsused, demapfftused, demapqamused);
  
  if (m->cr == C8P_CR_12) {
      cuv_cr_len = 2;
      cuv_cr_punc_p = &cuv_cr_punc[0];
  } else if (m->cr == C8P_CR_23) {
      cuv_cr_len = 4;
      cuv_cr_punc_p = &cuv_cr_punc[2];
  } else if (m->cr == C8P_CR_34) {
      cuv_cr_len = 6;
      cuv_cr_punc_p = &cuv_cr_punc[6];
  } else {
      cuv_cr_len = 10;
      cuv_cr_punc_p = &cuv_cr_punc[12];
  }
  cudaMemset(cuv_state_his, 0, sizeof(int) * 64 * (cuv_trellis + 1));
  cuDecodeViterbi<<<1, 64>>>(demodSigLlr,
                              cuv_llr_len,
                              cuv_trellis,
                              cuv_cr_len,
                              cuv_cr_punc_p,
                              cuv_state_his,
                              cuv_state_output,
                              cuv_state_next);
  // cuDecodeTb1<<<1, 1>>>(cuv_trellis, cuv_state_his, cuv_seq);
  // cuDecodeTb2<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_seq, cuv_state_next, cuv_bits);
  cuDecodeTbs<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_seqtb, cuv_state_his, cuv_state_next, cuv_bits);
  cuDecodeDescram<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_bits, cuv_descram_seq);
  cuDecodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, &cuv_bits[16], cuv_bytes);
  cudaMemcpy(psduBytes, cuv_bytes, m->len*sizeof(unsigned char), cudaMemcpyDeviceToHost);
}

void cuDemodMimo(c8p_mod* m, unsigned char* psduBytes)
{
  int cuv_llr_len = m->nSym * m->nCBPS;
  int* cuv_cr_punc_p;
  int cuv_cr_len;
  int cuv_trellis;
  cuFloatComplex* pilotsused;
  int* demapqamused;

  if(m->format == C8P_F_HT)
  {
    pilotsused = pilotsHt2;
    cuv_trellis = 22 + m->len*8;
  }
  else
  {
    pilotsused = pilotsVht2;
    cuv_trellis = m->nSym * m->nDBPS;
  }
  demapqamused = demodDemapNL2[m->mod];
  cuDemodChopSamp<<<(m->nSym * m->nSymSamp * 2 + 1023)/1024, 1024>>>(m->nSym * m->nSymSamp * 2, demodSig, demodSigFft);
  for(int symIter=0; symIter < ((m->nSym * 2 + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )   // each round inlcudes 256 batches
  {
    cufftExecC2C(demodPlan, &demodSigFft[symIter*CUDEMOD_FFT_BATCH*64], &demodSigFft[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_FORWARD);
  }
  cuDemodChanComp2<<<(m->nSym * 64 + 1023)/1024, 1024>>>(m->nSym * 64, demodSigFft, demodChanMimo, demodChanMimoInv);
  cuDemodQamToLlr2<<<(m->nSym * 64 * 2 + 1023)/1024, 1024>>>(m->nSym * 64 * 2, m->nCBPS, demodSigFft, demodSigLlr, pilotsused, pilotsNlLtf2, demodDemapFftNL, demapqamused);

  if (m->cr == C8P_CR_12) {
      cuv_cr_len = 2;
      cuv_cr_punc_p = &cuv_cr_punc[0];
  } else if (m->cr == C8P_CR_23) {
      cuv_cr_len = 4;
      cuv_cr_punc_p = &cuv_cr_punc[2];
  } else if (m->cr == C8P_CR_34) {
      cuv_cr_len = 6;
      cuv_cr_punc_p = &cuv_cr_punc[6];
  } else {
      cuv_cr_len = 10;
      cuv_cr_punc_p = &cuv_cr_punc[12];
  }
  cudaMemset(cuv_state_his, 0, sizeof(int) * 64 * (cuv_trellis + 1));
  cuDecodeViterbi<<<1, 64>>>(demodSigLlr,
                              cuv_llr_len,
                              cuv_trellis,
                              cuv_cr_len,
                              cuv_cr_punc_p,
                              cuv_state_his,
                              cuv_state_output,
                              cuv_state_next);
  // cuDecodeTb1<<<1, 1>>>(cuv_trellis, cuv_state_his, cuv_seq);
  // cuDecodeTb2<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_seq, cuv_state_next, cuv_bits);
  cuDecodeTbs<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_seqtb, cuv_state_his, cuv_state_next, cuv_bits);
  cuDecodeDescram<<<(cuv_trellis + 1023) / 1024, 1024>>>(cuv_trellis, cuv_bits, cuv_descram_seq);
  cuDecodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, &cuv_bits[16], cuv_bytes);
  cudaMemcpy(psduBytes, cuv_bytes, m->len*sizeof(unsigned char), cudaMemcpyDeviceToHost);
}

/*--------------------------------------------------------------------------------------------------------*/

__global__
void cuCodeB2B(int n, unsigned char *bytes, unsigned char *bits)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int indexOffset = i*8;
  if(i >= n)
  {
    return;
  }
  for(int j=0;j<8;j++)
  {
    bits[indexOffset+j] = (bytes[i] >> j) & 0x01;
  }
}

__global__ void cuCodeScramble(int n, unsigned char *bits, int init, unsigned char *sseq)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int indexOffset = init * 127;
  if(i >= n)
  {
    return;
  }
  bits[i] = bits[i] ^ sseq[indexOffset + (i % 127)];
}

__global__ void cuCodeBcc(int n, unsigned char *bits, unsigned char *codedbits)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if(i >= n)
  {
    return;
  }
  codedbits[i*2] = (bits[i] + bits[i+1] + bits[i+3] + bits[i+4] + bits[i+6]) % 2;
  codedbits[i*2+1] = (bits[i] + bits[i+3] + bits[i+4] + bits[i+5] + bits[i+6]) % 2;
}

__global__ void cuCodePunc(int n, int cr, unsigned char *codedbits, unsigned char *puncdbits)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j, k;
  if(i >= n)
  {
    return;
  }
  if(cr == C8P_CR_12)
  {
    puncdbits[i] = codedbits[i];
  }
  else if(cr == C8P_CR_23)
  {
    j = i / 4;
    k = i % 4;
    if(k != 3)
    {
      puncdbits[j*3 + k] = codedbits[i];
    }
  }
  else if(cr == C8P_CR_34)
  {
    j = i / 6;
    k = i % 6;
    if(k == 0 || k == 1 || k == 2)
    {
      puncdbits[j*4 + k] = codedbits[i];
    }
    else if(k == 5)
    {
      puncdbits[j*4 + 3] = codedbits[i];
    }
  }
  else
  {
    j = i / 10;
    k = i % 10;
    if(k == 0 || k == 1 || k == 2)
    {
      puncdbits[j*6 + k] = codedbits[i];
    }
    else if(k == 5 || k == 6)
    {
      puncdbits[j*6 + k - 2] = codedbits[i];
    }
    else if(k == 9)
    {
      puncdbits[j*6 + 5] = codedbits[i];
    }
  }
}

__global__ void cuCodeStreamParser(int n, int s, unsigned char *puncdbits, unsigned char *streambits0, unsigned char *streambits1)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j, k;
  if(i >= n)
  {
    return;
  }
  j = i / (2 * s);
  k = i % s;
  if((j%2) == 0)
  {
    streambits0[j*s+k] = puncdbits[i];
  }
  else
  {
    streambits1[j*s+k] = puncdbits[i];
  }
}

__global__ void cuCodeInterleave(int n, int ncbps, int *intmap, unsigned char *streambits, unsigned char *intedbits)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j, k;
  if(i >= n)
  {
    return;
  }
  j = i / ncbps;
  k = i % ncbps;
  intedbits[j * ncbps + intmap[k]] = streambits[i];
}

__global__ void cuQamModStream(int n, int nsd, int nbpscs, cuFloatComplex *qammap, int *scmap, cuFloatComplex *pilots, unsigned char *intedbits, cuFloatComplex *symfreq)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j, k;
  unsigned char qamIndex;
  if(i >= n)
  {
    return;
  }
  j = i / nsd;
  k = i % nsd;

  qamIndex = 0;
  for(int p=0;p<nbpscs;p++)
  {
    qamIndex = qamIndex | (intedbits[i*nbpscs+p] << p);
  }
  symfreq[j*64 + scmap[k]] = qammap[qamIndex];
  // insert 4 pilots
  if(k == 0)
  {
    symfreq[j*64 + 43] = pilots[j*4];
  }
  else if(k == 1)
  {
    symfreq[j*64 + 57] = pilots[j*4+1];
  }
  else if(k == 2)
  {
    symfreq[j*64 + 7] = pilots[j*4+2];
  }
  else if(k == 3)
  {
    symfreq[j*64 + 21] = pilots[j*4+3];
  }
  else
  {
    return;
  }
}

__global__ void cuGiScale(int n, float sf, cuFloatComplex *symfreq, cuFloatComplex *symfreqgi)
{
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j, q, k;
  if(i >= n)
  {
    return;
  }

  k = i % 80; // sample offset
  j = i - k;
  q = (i / 80) * 64;
  
  if(k >= 16)
  {
    symfreqgi[j + k] = make_cuFloatComplex(cuCrealf(symfreq[q+k-16]) * sf, cuCimagf(symfreq[q+k-16]) * sf);
  }
  else
  {
    symfreqgi[j + k] = make_cuFloatComplex(cuCrealf(symfreq[q+k+48]) * sf, cuCimagf(symfreq[q+k+48]) * sf);
  }
}

void cuDebugBits(unsigned char *bits, int n)
{
  uint8_t debugbits[65536];
  cudaMemcpy(debugbits, bits, sizeof(uint8_t) * n, cudaMemcpyDeviceToHost);
  std::cout<<"debug bits:"<<std::endl;
  for(int i=0;i<n;i++)
  {
    std::cout << (int) debugbits[i] << ", ";
  }
  std::cout<<std::endl;
  std::cout<<std::endl;
}

void cloud80211modcu::cuModMall()
{
  cudaError_t err;
  err = cudaMalloc(&scramSeq, sizeof(unsigned char) * 128 * 127);
  if(err){ std::cout<<"cloud80211modcu, malloc code scramSeq error."<<std::endl; initSuccess = false; return;}
  cudaMemcpy(scramSeq, C8P_SCRAMBLE_SEQ, sizeof(unsigned char) * 128 * 127, cudaMemcpyHostToDevice);
  err = cudaMalloc(&interLutL, sizeof(int) * (48 + 96 + 192 + 288));
  if(err){ std::cout<<"cloud80211modcu, malloc interLutL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&interLutNL, sizeof(int) * (52 + 104 + 208 + 312 + 416));
  if(err){ std::cout<<"cloud80211modcu, malloc interLutNL error."<<std::endl; initSuccess = false; return;}
  cudaMemcpy(interLutL, mapIntelLegacyBpsk, sizeof(int) * 48, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutL + 48, mapIntelLegacyQpsk, sizeof(int) * 96, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutL + 48 + 96, mapIntelLegacy16Qam, sizeof(int) * 192, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutL + 48 + 96 + 192, mapIntelLegacy64Qam, sizeof(int) * 288, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutNL, mapIntelNonlegacyBpsk, sizeof(int) * 52, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutNL + 52, mapIntelNonlegacyQpsk, sizeof(int) * 104, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutNL + 52 + 104, mapIntelNonlegacy16Qam, sizeof(int) * 208, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutNL + 52 + 104 + 208, mapIntelNonlegacy64Qam, sizeof(int) * 312, cudaMemcpyHostToDevice);
  cudaMemcpy(interLutNL + 52 + 104 + 208 + 312, mapIntelNonlegacy256Qam, sizeof(int) * 416, cudaMemcpyHostToDevice);
  for(int i=0;i<6;i++)
  {
    interLutLIdx[i] = NULL;
    interLutNLIdx[i] = NULL;
  }
  interLutLIdx[C8P_QAM_BPSK] = interLutL;
  interLutLIdx[C8P_QAM_QPSK] = interLutL + 48;
  interLutLIdx[C8P_QAM_16QAM] = interLutL + 48 + 96;
  interLutLIdx[C8P_QAM_64QAM] = interLutL + 48 + 96 + 192;
  interLutNLIdx[C8P_QAM_BPSK] = interLutNL;
  interLutNLIdx[C8P_QAM_QPSK] = interLutNL + 52;
  interLutNLIdx[C8P_QAM_16QAM] = interLutNL + 52 + 104;
  interLutNLIdx[C8P_QAM_64QAM] = interLutNL + 52 + 104 + 208;
  interLutNLIdx[C8P_QAM_256QAM] = interLutNL + 52 + 104 + 208 + 312;
  err = cudaMalloc(&qamLut, sizeof(cuFloatComplex) * (2 + 4 + 16 + 64 + 256));
  if(err){ std::cout<<"cloud80211modcu, malloc qamLut error."<<std::endl; initSuccess = false; return;}
  cudaMemcpy(qamLut, (const cuFloatComplex*) C8P_QAM_TAB_BPSK, sizeof(cuFloatComplex) * 2, cudaMemcpyHostToDevice);
  cudaMemcpy(qamLut + 2, (const cuFloatComplex*) C8P_QAM_TAB_QPSK, sizeof(cuFloatComplex) * 4, cudaMemcpyHostToDevice);
  cudaMemcpy(qamLut + 2 + 4, (const cuFloatComplex*) C8P_QAM_TAB_16QAM, sizeof(cuFloatComplex) * 16, cudaMemcpyHostToDevice);
  cudaMemcpy(qamLut + 2 + 4 + 16, (const cuFloatComplex*) C8P_QAM_TAB_64QAM, sizeof(cuFloatComplex) * 64, cudaMemcpyHostToDevice);
  cudaMemcpy(qamLut + 2 + 4 + 16 + 64, (const cuFloatComplex*) C8P_QAM_TAB_256QAM, sizeof(cuFloatComplex) * 256, cudaMemcpyHostToDevice);
  qamLutIdx[C8P_QAM_BPSK] = qamLut;
  qamLutIdx[C8P_QAM_QPSK] = qamLut + 2;
  qamLutIdx[C8P_QAM_16QAM] = qamLut + 2 + 4;
  qamLutIdx[C8P_QAM_64QAM] = qamLut + 2 + 4 + 16;
  qamLutIdx[C8P_QAM_256QAM] = qamLut + 2 + 4 + 16 + 64;

  err = cudaMalloc(&qamScMapL, sizeof(int) * 48);
  if(err){ std::cout<<"cloud80211modcu, malloc qamScMapL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&qamScMapNL, sizeof(int) * 52);
  if(err){ std::cout<<"cloud80211modcu, malloc qamScMapNL error."<<std::endl; initSuccess = false; return;}
  int tmpQamScMapL[48] = {38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26};
  cudaMemcpy(qamScMapL, tmpQamScMapL, sizeof(int) * 48, cudaMemcpyHostToDevice);
  int tmpQamScMapNL[52] = {36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28};
  cudaMemcpy(qamScMapNL, tmpQamScMapNL, sizeof(int) * 52, cudaMemcpyHostToDevice);

  cufftResult errfft = cufftPlan1d(&ifftModPlan, 64, CUFFT_C2C, CUDEMOD_FFT_BATCH);
  if(errfft){ std::cout<<"cloud80211modcu, ifftModPlan plan creation failed"<<std::endl;}
  err = cudaStreamCreate(&modStream0);
  if(err){ std::cout<<"cloud80211modcu, create cudaStream0 error."<<std::endl; initSuccess = false; return;}
  err = cudaStreamCreate(&modStream1);
  if(err){ std::cout<<"cloud80211modcu, create cudaStream1 error."<<std::endl; initSuccess = false; return;}

  err = cudaMalloc(&pilotsL, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211modcu, malloc pilotsL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pilotsHT, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211modcu, malloc pilotsL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pilotsHT2, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8);
  if(err){ std::cout<<"cloud80211modcu, malloc pilotsL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pilotsVHT, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4);
  if(err){ std::cout<<"cloud80211modcu, malloc pilotsL error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pilotsVHT2, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8);
  if(err){ std::cout<<"cloud80211modcu, malloc pilotsL error."<<std::endl; initSuccess = false; return;}

  cuFloatComplex pListTmp[CUDEMOD_S_MAX * 8];
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(1.0f * PILOT_P[(i+1)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(-1.0f * PILOT_P[(i+1)%127], 0.0f);
  }
  cudaMemcpy(pilotsL, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  float pTmp[4] = {1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(pTmp[0] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(pTmp[1] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(pTmp[2] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(pTmp[3] * PILOT_P[(i+3)%127], 0.0f);

    float tmpPilot = pTmp[0];
    pTmp[0] = pTmp[1];
    pTmp[1] = pTmp[2];
    pTmp[2] = pTmp[3];
    pTmp[3] = tmpPilot;
  }
  cudaMemcpy(pilotsHT, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  float pTmp2[4] = {1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*4] = make_cuFloatComplex(pTmp2[0] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+1] = make_cuFloatComplex(pTmp2[1] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+2] = make_cuFloatComplex(pTmp2[2] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*4+3] = make_cuFloatComplex(pTmp2[3] * PILOT_P[(i+4)%127], 0.0f);

    float tmpPilot = pTmp2[0];
    pTmp2[0] = pTmp2[1];
    pTmp2[1] = pTmp2[2];
    pTmp2[2] = pTmp2[3];
    pTmp2[3] = tmpPilot;
  }
  cudaMemcpy(pilotsVHT, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 4, cudaMemcpyHostToDevice);
  float pTmp3[8] = {1.0f, 1.0f, -1.0f, -1.0f, 1.0f, -1.0f, -1.0f, 1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*8]   = make_cuFloatComplex(pTmp3[0] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+1] = make_cuFloatComplex(pTmp3[1] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+2] = make_cuFloatComplex(pTmp3[2] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+3] = make_cuFloatComplex(pTmp3[3] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+4] = make_cuFloatComplex(pTmp3[4] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+5] = make_cuFloatComplex(pTmp3[5] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+6] = make_cuFloatComplex(pTmp3[6] * PILOT_P[(i+3)%127], 0.0f);
    pListTmp[i*8+7] = make_cuFloatComplex(pTmp3[7] * PILOT_P[(i+3)%127], 0.0f);

    float tmpPilot = pTmp3[0];
    pTmp3[0] = pTmp3[1];
    pTmp3[1] = pTmp3[2];
    pTmp3[2] = pTmp3[3];
    pTmp3[3] = tmpPilot;
    tmpPilot = pTmp3[4];
    pTmp3[4] = pTmp3[5];
    pTmp3[5] = pTmp3[6];
    pTmp3[6] = pTmp3[7];
    pTmp3[7] = tmpPilot;
  }
  cudaMemcpy(pilotsHT2, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8, cudaMemcpyHostToDevice);
  float pTmp4[8] = {1.0f, 1.0f, 1.0f, -1.0f, 1.0f, 1.0f, 1.0f, -1.0f};
  for(int i=0;i<CUDEMOD_S_MAX;i++)
  {
    pListTmp[i*8]   = make_cuFloatComplex(pTmp4[0] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+1] = make_cuFloatComplex(pTmp4[1] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+2] = make_cuFloatComplex(pTmp4[2] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+3] = make_cuFloatComplex(pTmp4[3] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+4] = make_cuFloatComplex(pTmp4[4] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+5] = make_cuFloatComplex(pTmp4[5] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+6] = make_cuFloatComplex(pTmp4[6] * PILOT_P[(i+4)%127], 0.0f);
    pListTmp[i*8+7] = make_cuFloatComplex(pTmp4[7] * PILOT_P[(i+4)%127], 0.0f);

    float tmpPilot = pTmp4[0];
    pTmp4[0] = pTmp4[1];
    pTmp4[1] = pTmp4[2];
    pTmp4[2] = pTmp4[3];
    pTmp4[3] = tmpPilot;
    tmpPilot = pTmp4[4];
    pTmp4[4] = pTmp4[5];
    pTmp4[5] = pTmp4[6];
    pTmp4[6] = pTmp4[7];
    pTmp4[7] = tmpPilot;
  }
  cudaMemcpy(pilotsVHT2, pListTmp, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 8, cudaMemcpyHostToDevice);

  err = cudaMalloc(&pktBytes, sizeof(unsigned char) * CUDEMOD_B_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBytes error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktBits, sizeof(unsigned char) * CUDEMOD_T_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBits error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktBitsCoded, sizeof(unsigned char) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBitsCoded error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktBitsPuncd, sizeof(unsigned char) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBitsPuncd error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktBitsInted, sizeof(unsigned char) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBitsInted error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktBitsStream, sizeof(unsigned char) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktBitsStream0 error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktSymFreq, sizeof(cuFloatComplex) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktSymFreq error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktSymTime, sizeof(cuFloatComplex) * CUDEMOD_L_MAX);
  if(err){ std::cout<<"cloud80211modcu, malloc pktSymTime error."<<std::endl; initSuccess = false; return;}
  err = cudaMalloc(&pktSym, sizeof(cuFloatComplex) * CUDEMOD_S_MAX * 80);
  if(err){ std::cout<<"cloud80211modcu, malloc pktSym error."<<std::endl; initSuccess = false; return;}
}

void cloud80211modcu::cuModFree()
{
  cudaFree(scramSeq);
  cudaFree(interLutL);
  cudaFree(interLutNL);
  cudaFree(qamLut);
  cudaFree(qamScMapL);
  cudaFree(qamScMapNL);
  cudaFree(pilotsL);
  cudaFree(pilotsHT);
  cudaFree(pilotsHT2);
  cudaFree(pilotsVHT);
  cudaFree(pilotsVHT2);
  cufftDestroy(ifftModPlan);
  cudaStreamDestroy(modStream0);
  cudaStreamDestroy(modStream1);

  cudaFree(pktBytes);
  cudaFree(pktBits);
  cudaFree(pktBitsCoded);
  cudaFree(pktBitsPuncd);
  cudaFree(pktBitsInted);
  cudaFree(pktBitsStream);
  cudaFree(pktSymFreq);
  cudaFree(pktSymTime);
  cudaFree(pktSym);
}

void cloud80211modcu::cuModPktCopySu(int i, int n, const unsigned char *bytes)
{
  cudaMemcpy(pktBytes + i, bytes, n*sizeof(unsigned char), cudaMemcpyHostToDevice);
}

void cloud80211modcu::cuModLHTSiso(c8p_mod *m, cuFloatComplex *sig)
{
  // 6 bits reserved for bcc init zeros
  cudaMemset(pktBits, 0, sizeof(unsigned char) * (m->nSym * m->nDBPS + 6));
  // psdu without padding octets or bits
  cuCodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, pktBytes, pktBits + 16 + 6);
  // scramble all data bits
  cuCodeScramble<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits + 6, scrambler, scramSeq);
  // reset the 6 bits for bcc
  cudaMemset(pktBits + 6 + 16 + m->len * 8, 0, sizeof(unsigned char) * 6);
  // coding
  cuCodeBcc<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits, pktBitsCoded);
  // puncturing
  cuCodePunc<<<(m->nSym * m->nDBPS * 2 + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS * 2, m->cr, pktBitsCoded, pktBitsPuncd);
  cuDebugBits(pktBitsPuncd, m->nSym * m->nCBPS);
  if(m->format == C8P_F_L)
  {
    // interleaving
    cuCodeInterleave<<<(m->nSym * m->nCBPSS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPSS, m->nCBPSS, interLutLIdx[m->mod], pktBitsPuncd, pktBitsInted);
    // modulation
    cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024>>>(m->nSym * m->nSD, 48, m->nBPSCS, qamLutIdx[m->mod], qamScMapL, pilotsL, pktBitsInted, pktSymFreq);
  }
  else
  {
    // interleaving
    cuCodeInterleave<<<(m->nSym * m->nCBPSS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPSS, m->nCBPSS, interLutNLIdx[m->mod], pktBitsPuncd, pktBitsInted);
    // modulation
    cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsHT, pktBitsInted, pktSymFreq);
  }
  // ifft
  for(int symIter=0; symIter < ((m->nSym + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )
  {
    cufftExecC2C(ifftModPlan, &pktSymFreq[symIter*CUDEMOD_FFT_BATCH*64], &pktSymTime[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_INVERSE);
  }
  // guard interval
  if(m->format == C8P_F_L)
  {
    cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024>>>(m->nSym * m->nSymSamp, scaleFactorL, pktSymTime, pktSym);
  }
  else
  {
    cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime, pktSym);
  }
  // copy to cpu
  cudaMemcpy(sig, pktSym, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
}

void cloud80211modcu::cuModHTMimo(c8p_mod *m, cuFloatComplex *sig0, cuFloatComplex *sig1)
{
  cudaMemset(pktBits, 0, sizeof(unsigned char) * (m->nSym * m->nDBPS + 6));
  cuCodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, pktBytes, pktBits + 16 + 6);
  cuCodeScramble<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits + 6, scrambler, scramSeq);
  cudaMemset(pktBits + 6 + 16 + m->len * 8, 0, sizeof(unsigned char) * 6);
  cuCodeBcc<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits, pktBitsCoded);
  cuCodePunc<<<(m->nSym * m->nDBPS * 2 + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS * 2, m->cr, pktBitsCoded, pktBitsPuncd);
  cuCodeStreamParser<<<(m->nSym * m->nCBPS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPS, std::max(m->nBPSCS/2, 1), pktBitsPuncd, pktBitsStream, pktBitsStream + m->nSym * m->nCBPSS);
  cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024, 0, modStream0>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsHT, pktBitsStream, pktSymFreq);
  cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024, 0, modStream1>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsHT2, pktBitsStream + m->nSym * m->nCBPSS, pktSymFreq + m->nSym*64);
  cudaStreamSynchronize(modStream0);
  cudaStreamSynchronize(modStream1);
  for(int symIter=0; symIter < ((m->nSym * 2 + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )
  {
    cufftExecC2C(ifftModPlan, &pktSymFreq[symIter*CUDEMOD_FFT_BATCH*64], &pktSymTime[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_INVERSE);
  }
  cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024, 0, modStream0>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime, pktSym);
  cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024, 0, modStream1>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime + m->nSym*64, pktSym + m->nSym*80);
  cudaStreamSynchronize(modStream0);
  cudaStreamSynchronize(modStream1);
  cudaMemcpy(sig0, pktSym, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
  cudaMemcpy(sig1, pktSym + m->nSym*80, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
}

void cloud80211modcu::cuModVHTSiso(c8p_mod *m, cuFloatComplex *sig, unsigned char *vhtSigBCrc8Bits)
{
  // 6 bits reserved for bcc init zeros
  cudaMemset(pktBits, 0, sizeof(unsigned char) * (m->nSym * m->nDBPS + 6));
  // vht service
  cudaMemcpy(pktBits + 8 + 6, vhtSigBCrc8Bits, 8*sizeof(unsigned char), cudaMemcpyHostToDevice);
  // psdu without padding octets or bits
  cuCodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, pktBytes, pktBits + 16 + 6);
  // scramble all data bits except tail 6 bits for bcc
  cuCodeScramble<<<(m->nSym * m->nDBPS - 6 + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS - 6, pktBits + 6, scrambler, scramSeq);
  // coding
  cuCodeBcc<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits, pktBitsCoded);
  // puncturing
  cuCodePunc<<<(m->nSym * m->nCBPS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPS, m->cr, pktBitsCoded, pktBitsPuncd);
  // interleaving
  cuCodeInterleave<<<(m->nSym * m->nCBPSS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPSS, m->nCBPSS, interLutNLIdx[m->mod], pktBitsPuncd, pktBitsInted);
  // modulation
  cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsVHT, pktBitsInted, pktSymFreq);
  // ifft
  for(int symIter=0; symIter < ((m->nSym + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )
  {
    cufftExecC2C(ifftModPlan, &pktSymFreq[symIter*CUDEMOD_FFT_BATCH*64], &pktSymTime[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_INVERSE);
  }
  // guard interval
  cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime, pktSym);
  // copy to cpu
  cudaMemcpy(sig, pktSym, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
}

void cloud80211modcu::cuModVHTSuMimo(c8p_mod *m, cuFloatComplex *sig0, cuFloatComplex *sig1, unsigned char *vhtSigBCrc8Bits)
{
  cudaMemset(pktBits, 0, sizeof(unsigned char) * (m->nSym * m->nDBPS + 6));
  cudaMemcpy(pktBits + 8 + 6, vhtSigBCrc8Bits, 8*sizeof(unsigned char), cudaMemcpyHostToDevice);
  cuCodeB2B<<<(m->len + 1023) / 1024, 1024>>>(m->len, pktBytes, pktBits + 16 + 6);
  cuCodeScramble<<<(m->nSym * m->nDBPS - 6 + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS - 6, pktBits + 6, scrambler, scramSeq);
  cuCodeBcc<<<(m->nSym * m->nDBPS + 1023) / 1024, 1024>>>(m->nSym * m->nDBPS, pktBits, pktBitsCoded);
  cuCodePunc<<<(m->nSym * m->nCBPS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPS, m->cr, pktBitsCoded, pktBitsPuncd);
  cuCodeStreamParser<<<(m->nSym * m->nCBPS + 1023) / 1024, 1024>>>(m->nSym * m->nCBPS, std::max(m->nBPSCS/2, 1), pktBitsPuncd, pktBitsStream, pktBitsStream + m->nSym * m->nCBPSS);
  cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024, 0, modStream0>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsHT, pktBitsStream, pktSymFreq);
  cuQamModStream<<<(m->nSym * m->nSD + 1023) / 1024, 1024, 0, modStream1>>>(m->nSym * m->nSD, 52, m->nBPSCS, qamLutIdx[m->mod], qamScMapNL, pilotsHT2, pktBitsStream + m->nSym * m->nCBPSS, pktSymFreq + m->nSym*64);
  cudaStreamSynchronize(modStream0);
  cudaStreamSynchronize(modStream1);
  for(int symIter=0; symIter < ((m->nSym * 2 + CUDEMOD_FFT_BATCH - 1) / CUDEMOD_FFT_BATCH); symIter++ )
  {
    cufftExecC2C(ifftModPlan, &pktSymFreq[symIter*CUDEMOD_FFT_BATCH*64], &pktSymTime[symIter*CUDEMOD_FFT_BATCH*64], CUFFT_INVERSE);
  }
  cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024, 0, modStream0>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime, pktSym);
  cuGiScale<<<(m->nSym * m->nSymSamp + 1023) / 1024, 1024, 0, modStream1>>>(m->nSym * m->nSymSamp, scaleFactorNL, pktSymTime + m->nSym*64, pktSym + m->nSym*80);
  cudaStreamSynchronize(modStream0);
  cudaStreamSynchronize(modStream1);
  cudaMemcpy(sig0, pktSym, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
  cudaMemcpy(sig1, pktSym + m->nSym*80, sizeof(cuFloatComplex) * m->nSym * 80, cudaMemcpyDeviceToHost);
}

void cloud80211modcu::cuModVHTMuMimo(c8p_mod *m, cuFloatComplex *sig0, cuFloatComplex *sig1, unsigned char *vhtSigB0Crc8Bits, unsigned char *vhtSigB1Crc8Bits)
{

}

cloud80211modcu::cloud80211modcu()
{
  initSuccess = true;
  scrambler = 93;
  scaleFactorL = 1.0f / sqrtf(C8P_SCALENTF_L) / 3.55555f;
	scaleFactorNL = 1.0f / sqrtf(C8P_SCALENTF_NL) / 3.55555f;
  cuModMall();
}

cloud80211modcu::~cloud80211modcu()
{
  cuModFree();
}

